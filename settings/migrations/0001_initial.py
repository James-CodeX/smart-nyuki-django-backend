# Generated by Django 5.2.1 on 2025-07-15 07:42

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('apiaries', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DataSyncSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('auto_sync_enabled', models.BooleanField(default=True, help_text='Enable automatic data synchronization')),
                ('sync_frequency', models.CharField(choices=[('Real-time', 'Real-time'), ('Hourly', 'Hourly'), ('Daily', 'Daily')], default='Hourly', help_text='How often to sync data', max_length=20)),
                ('wifi_only_sync', models.BooleanField(default=False, help_text='Only sync when connected to WiFi')),
                ('backup_enabled', models.BooleanField(default=True, help_text='Enable automatic data backup')),
                ('backup_frequency', models.CharField(choices=[('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly')], default='Weekly', help_text='How often to backup data', max_length=20)),
                ('data_retention_days', models.IntegerField(default=365, help_text='How many days to keep sensor data (30-3650 days)', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(3650)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='data_sync_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Data Sync Settings',
                'verbose_name_plural': 'Data Sync Settings',
                'db_table': 'data_sync_settings',
            },
        ),
        migrations.CreateModel(
            name='NotificationSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('push_notifications', models.BooleanField(default=True, help_text='Enable push notifications')),
                ('email_notifications', models.BooleanField(default=True, help_text='Enable email notifications')),
                ('sms_notifications', models.BooleanField(default=False, help_text='Enable SMS notifications')),
                ('alert_sound', models.BooleanField(default=True, help_text='Enable sound alerts')),
                ('quiet_hours_start', models.TimeField(default='22:00', help_text='Start time for quiet hours')),
                ('quiet_hours_end', models.TimeField(default='06:00', help_text='End time for quiet hours')),
                ('critical_alerts_override_quiet', models.BooleanField(default=True, help_text='Allow critical alerts during quiet hours')),
                ('daily_summary_enabled', models.BooleanField(default=True, help_text='Enable daily summary notifications')),
                ('daily_summary_time', models.TimeField(default='08:00', help_text='Time to send daily summary')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification Settings',
                'verbose_name_plural': 'Notification Settings',
                'db_table': 'notification_settings',
            },
        ),
        migrations.CreateModel(
            name='PrivacySettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('location_sharing', models.BooleanField(default=False, help_text='Allow sharing location data')),
                ('analytics_enabled', models.BooleanField(default=True, help_text='Enable analytics and usage tracking')),
                ('crash_reporting', models.BooleanField(default=True, help_text='Enable crash reporting for app improvement')),
                ('data_sharing_research', models.BooleanField(default=False, help_text='Allow anonymized data sharing for research')),
                ('profile_visibility', models.CharField(choices=[('Private', 'Private'), ('Public', 'Public'), ('Community', 'Community')], default='Private', help_text='Who can see your profile', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='privacy_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Privacy Settings',
                'verbose_name_plural': 'Privacy Settings',
                'db_table': 'privacy_settings',
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timezone', models.CharField(default='UTC', help_text="User's timezone preference", max_length=50)),
                ('language', models.CharField(default='en', help_text="User's language preference", max_length=10)),
                ('temperature_unit', models.CharField(choices=[('Celsius', 'Celsius'), ('Fahrenheit', 'Fahrenheit')], default='Celsius', help_text='Preferred temperature unit', max_length=20)),
                ('weight_unit', models.CharField(choices=[('Kilograms', 'Kilograms'), ('Pounds', 'Pounds')], default='Kilograms', help_text='Preferred weight unit', max_length=20)),
                ('date_format', models.CharField(choices=[('DD/MM/YYYY', 'DD/MM/YYYY'), ('MM/DD/YYYY', 'MM/DD/YYYY'), ('YYYY-MM-DD', 'YYYY-MM-DD')], default='DD/MM/YYYY', help_text='Preferred date format', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Settings',
                'verbose_name_plural': 'User Settings',
                'db_table': 'user_settings',
            },
        ),
        migrations.CreateModel(
            name='AlertThresholds',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('temperature_min', models.DecimalField(decimal_places=2, default=32.0, help_text='Minimum temperature alert threshold in °C', max_digits=5, validators=[django.core.validators.DecimalValidator(decimal_places=2, max_digits=5)])),
                ('temperature_max', models.DecimalField(decimal_places=2, default=38.0, help_text='Maximum temperature alert threshold in °C', max_digits=5, validators=[django.core.validators.DecimalValidator(decimal_places=2, max_digits=5)])),
                ('humidity_min', models.DecimalField(decimal_places=2, default=40.0, help_text='Minimum humidity alert threshold in %', max_digits=5, validators=[django.core.validators.DecimalValidator(decimal_places=2, max_digits=5), django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('humidity_max', models.DecimalField(decimal_places=2, default=70.0, help_text='Maximum humidity alert threshold in %', max_digits=5, validators=[django.core.validators.DecimalValidator(decimal_places=2, max_digits=5), django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('weight_change_threshold', models.DecimalField(decimal_places=2, default=2.0, help_text='Daily weight change alert threshold in kg', max_digits=6, validators=[django.core.validators.DecimalValidator(decimal_places=2, max_digits=6)])),
                ('sound_level_threshold', models.IntegerField(default=85, help_text='Sound level alert threshold in dB', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)])),
                ('battery_warning_level', models.IntegerField(default=20, help_text='Battery warning level in %', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('inspection_reminder_days', models.IntegerField(default=7, help_text='Days before inspection due to send reminder', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('hive', models.ForeignKey(blank=True, help_text='Null means global setting for all hives', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alert_thresholds', to='apiaries.hives')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alert_thresholds', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Alert Threshold',
                'verbose_name_plural': 'Alert Thresholds',
                'db_table': 'alert_thresholds',
                'unique_together': {('user', 'hive')},
            },
        ),
    ]
