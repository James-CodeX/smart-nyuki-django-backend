# Generated by Django 5.2.1 on 2025-07-02 15:28

from django.db import migrations


def populate_beekeeper_field(apps, schema_editor):
    """Populate beekeeper field for existing devices based on hive ownership"""
    SmartDevices = apps.get_model('devices', 'SmartDevices')
    
    # Update devices that are assigned to hives
    for device in SmartDevices.objects.filter(hive__isnull=False, beekeeper__isnull=True):
        if device.hive and device.hive.apiary and device.hive.apiary.beekeeper:
            device.beekeeper = device.hive.apiary.beekeeper
            device.save()
            print(f"Assigned device {device.serial_number} to beekeeper {device.beekeeper.user.email}")
    
    # For unassigned devices, we can't automatically determine ownership
    # These will need to be manually assigned later
    unassigned_devices = SmartDevices.objects.filter(hive__isnull=True, beekeeper__isnull=True)
    if unassigned_devices.exists():
        print(f"Warning: {unassigned_devices.count()} unassigned devices need manual beekeeper assignment")


def reverse_populate_beekeeper_field(apps, schema_editor):
    """Reverse migration - set beekeeper field to null"""
    SmartDevices = apps.get_model('devices', 'SmartDevices')
    SmartDevices.objects.update(beekeeper=None)


class Migration(migrations.Migration):

    dependencies = [
        ('devices', '0002_smartdevices_beekeeper'),
    ]

    operations = [
        migrations.RunPython(
            populate_beekeeper_field,
            reverse_populate_beekeeper_field
        ),
    ]
